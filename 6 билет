ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 6
№1: Спецификация языка программирования — это документация, определяющая синтаксис и семантику языка, чтобы разработчики и пользователи могли понимать, как интерпретировать программы.
№2: Тестирование методом «черного ящика» — это тестирование, при котором проверяется функциональность программы без знания её внутреннего устройства. Типы включают функциональное, нефункциональное, регрессионное тестирование. Применяется для проверки соответствия программы требованиям, например, тестирование пользовательского интерфейса.
Практическое задание: 
Код:
using System;

public class QuadraticEquationSolver
{
    public static Tuple<double, double> Solve(double a, double b, double c)
    {
        double delta = b * b - 4 * a * c;
        if (delta < 0) return new Tuple<double, double>(double.NaN, double.NaN);
        double x1 = (-b + Math.Sqrt(delta)) / (2 * a);
        double x2 = (-b - Math.Sqrt(delta)) / (2 * a);
        return new Tuple<double, double>(x1, x2);
    }
}

Тест:
using Xunit;

public class QuadraticEquationSolverTests
{
    [Theory]
    [InlineData(1, -3, 2, 2, 1)] // x^2 - 3x + 2 = 0 has roots x = 2, x = 1
    [InlineData(1, -2, 1, 1, 1)] // x^2 - 2x + 1 = 0 has one root x = 1 (double root)
    public void Solve_ReturnsCorrectRoots(double a, double b, double c, double expectedRoot1, double expectedRoot2)
    {
        var result = QuadraticEquationSolver.Solve(a, b, c);
        Assert.Equal(expectedRoot1, result.Item1, 5);
        Assert.Equal(expectedRoot2, result.Item2, 5);
    }

    [Theory]
    [InlineData(1, 0, 1)] // x^2 + 1 = 0 has no real roots
    public void Solve_ReturnsNaNForComplexRoots(double a, double b, double c)
    {
        var result = QuadraticEquationSolver.Solve(a, b, c);
        Assert.True(double.IsNaN(result.Item1));
        Assert.True(double.IsNaN(result.Item2));
    }
}
