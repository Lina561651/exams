ЭКЗАМЕНАЦИОННЫЙ БИЛЕТ № 1
№1: Сервис-ориентированная архитектура – это метод разработки программного обеспечения, который использует программные компоненты, называемые сервисами, для создания бизнес-приложений. Принципы: обеспечение совместимости, слабая взаимозависимость, абстрагирование, степень детализации.
№2: Модульное тестирование – это тип тестирования программного обеспечения, при котором тестируются отдельные модули или компоненты программного обеспечения. Его цель заключается в проверке того, что каждая единица программного кода работает должным образом. 1) Модульные тесты позволяют исправить ошибки на ранних этапах разработки и снизить затраты. 2) Это помогает разработчикам лучше понимать кодовую базу проекта. 3) Хорошие юнит-тесты служат проектной документацией. 4) Модульные тесты помогают с миграцией кода. Просто переносите код и тесты в новый проект и изменяете код, пока тесты не запустятся снова. 
Принцип работы: 1) Разработчик записывает в приложение единицу кода, комментируют и удаляют тестовый код при развертывании приложения. 2) Разработчик может изолировать единицу кода для качественного тестирования - копирование кода в собственную среду тестирования. Изоляция кода помогает выявить ненужные зависимости с другими модулями. Методы: 1) Белый ящик, 2) Чёрный ящик, 3) Серый ящик. Алгоритм модульного тестирования: 1) Создание тестовых случаев 2)Просмотр / переработка 3)Базовая линия 4)Выполнение тестовых случаев. 
Преимущества: 1) модульные тесты дают общее представление об API модуля. 2) Рефарторинг на этапе регрессионного тестирования 3) Можем тестировать части проекта, не дожидаясь завершения других. 4) Экономия времени и денег
Недостатки: 1) Не выявит всех ошибок. 2) Не может отловить ошибки интеграции или ошибки системного уровня.
Практическое задание: 
Код:
using System;
public class SequenceFinder
{
    public static int FindFirstLargerThan(double A, int K)
    {
        double sum = 0;
        for (int i = 1; i <= K; i++)
        {
            sum += 1.0 / i;
            if (sum > A) return i;
        }
        return -1; 
    }
}
Тест:
using NUnit.Framework;
[TestFixture]
public class SequenceFinderTests
{
    [Test]
    public void FindFirstLargerThan_ReturnsCorrectIndex()
    {
        Assert.AreEqual(4, SequenceFinder.FindFirstLargerThan(2, 10));
    }
    [Test]
    public void FindFirstLargerThan_ReturnsNegativeOneWhenNotFound()
    {
        Assert.AreEqual(-1, SequenceFinder.FindFirstLargerThan(10, 5));
    }
}
